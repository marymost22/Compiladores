preprocesado 
Sustitucion de constantes:

Lineas en el archivo 2019,2030,2031,2044,2045,2047

int main(int argc, char *argv[]){
  float A[600][600], B[600][600], C[600][600], t, r;  //Vemos como se sustituye el tamano del array
  int i,j,k, maxIt;

  if (argc<2){
    printf("[ERROR] Indicar numero de iteraciones como argumento\n");
    return -1;
  } else{  
    maxIt = atoi(argv[1]);
    tiempo=0;
  }

  for(i=0;i<600;i++){  // Aqui se sustituye por el valor maximo de i
    for(j=0;j<600;j++) { // Aqui se sustituye por el valor maximo de j
      A[i][j]=(i+j)/(j+1.1);
      B[i][j]=(i-j)/(j+2.1);
    }
  }

  for(int it=0; it<maxIt; it++){
    gettimeofday(&inicio,
    # 32 "ejercicio2.c" 3 4
                    ((void *)0)
    # 32 "ejercicio2.c"
                        );

    for(i=0;i<600;i++){  // Igual que el caso anterior, con i
      for(j=0;j<600;j++) { // Igual que el caso anterior, con j
        t=0;
        for (k=0;k<600;k++) { // Igual que el caso anterior, con k
          producto(A[i][k],B[k][j],&r);
          t+=r;
        }
        C[i][j]=t;
      }
    }
----------------------------------------------------------------------
Ensamblador
como se implementanl lazos

.L3:
	movq	-4320080(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	atoi
	movl	%eax, -4320028(%rbp)
	pxor	%xmm0, %xmm0
	movsd	%xmm0, tiempo(%rip)
	movl	$0, -4320044(%rbp) // Asignar 0 a donde parece que está la variable i
	jmp	.L5 // Salto incondicional a L5			
.L8:
	movl	$0, -4320040(%rbp) // Asignar 0 a donde parece que está la variable j
	jmp	.L6 // Salto incondicional a L6
.L7:
	movl	-4320044(%rbp), %ed // Operaciones correspondientes a la asignacion de valores
	movl	-4320040(%rbp), %eax
	addl	%edx, %eax
	.
	.
	.
	addq	%rdx, %rax
	movss	%xmm0, -2880016(%rbp,%rax,4)
	addl	$1, -4320040(%rbp) // Suma 1 a la variable j 
.L6:
	cmpl	$599, -4320040(%rbp) // Comprobacion para salir del bucle de j 
	jle	.L7 // Salto condicional a L7 si el valor es menor o igual
	addl	$1, -4320044(%rbp) // Sumamos 1 a la variable i
.L5:
	cmpl	$599, -4320044(%rbp) // Comprobacion para salir del bucle de i
	jle	.L8 // Salto condicional a L8 si se cumple
	movl	$0, -4320032(%rbp) // Si no se cumple, salimos. 
	jmp	.L9 // Salto a L9, ya corresponde al siguiente bucle


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

como se hacen llamadas a funciones
producto:
.LFB2:
	.cfi_startproc
	pushq	%rbp 
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	
	.cfi_def_cfa_register 6
	movss	%xmm0, -4(%rbp) 
	movss	%xmm1, -8(%rbp)
	movq	%rdi, -16(%rbp)
	movss	-4(%rbp), %xmm0
	mulss	-8(%rbp), %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, (%rax)
	nop
	popq	%rbp 
	.cfi_def_cfa 7, 8
	ret 
	.cfi_endproc

.
.
.

.L13:
	movl	-4320040(%rbp), %eax		// Preparación de los parametros
	cltq
	movl	-4320036(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$600, %rdx, %rdx
	addq	%rdx, %rax
	movss	-2880016(%rbp,%rax,4), %xmm0
	movl	-4320036(%rbp), %eax
	cltq
	movl	-4320044(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$600, %rdx, %rdx
	addq	%rdx, %rax
	movl	-4320016(%rbp,%rax,4), %eax
	leaq	-4320052(%rbp), %rdx
	movq	%rdx, %rdi
	movaps	%xmm0, %xmm1
	movl	%eax, -4320088(%rbp)
	movss	-4320088(%rbp), %xmm0
	call	producto	// Llamada a la funcion 
	movss	-4320052(%rbp), %xmm0
	movss	-4320048(%rbp), %xmm1
	addss	%xmm1, %xmm0
	movss	%xmm0, -4320048(%rbp)
	addl	$1, -4320036(%rbp)

operaciones en punto flotante
producto:
.LFB2:
	.cfi_startproc
	pushq	%rbp // Almacena el actual base pointer en la cima de la pila
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	// El base pointer ahora es el stack pointer
	.cfi_def_cfa_register 6
	movss	%xmm0, -4(%rbp)
	movss	%xmm1, -8(%rbp)
	movq	%rdi, -16(%rbp)
	movss	-4(%rbp), %xmm0
	mulss	-8(%rbp), %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, (%rax)
	nop
	popq	%rbp // Saca el base pointer de la pila 
	.cfi_def_cfa 7, 8
	ret // Retorno a la instruccion donde se hizo la llamada 
	.cfi_endproc

-----------------------------------------------------------------
Objeto:



7f45 4c46 0201 0100 0000 0000 0000 0000
0100 3e00 0100 0000 0000 0000 0000 0000
0000 0000 0000 0000 300a 0000 0000 0000
0000 0000 4000 0000 0000 4000 0d00 0a00
5548 89e5 f30f 1145 fcf3 0f11 4df8 4889
7df0 f30f 1045 fcf3 0f59 45f8 488b 45f0
f30f 1100 905d c355 4889 e548 81ec 60eb
4100 89bd bc14 beff 4889 b5b0 14be ff64
488b 0425 2800 0000 4889 45f8 31c0 83bd
bc14 beff 017f 14bf 0000 0000 e800 0000
00b8 ffff ffff e95b 0300 0048 8b85 b014
beff 4883 c008 488b 0048 89c7 e800 0000
0089 85e4 14be ff66 0fef c0f2 0f11 0500
0000 00c7 85d4 14be ff00 0000 00e9 df00
0000 c785 d814 beff 0000 0000 e9b9 0000
008b 95d4 14be ff8b 85d8 14be ff01 d066
0fef c0f2 0f2a c066 0fef c9f2 0f2a 8dd8
14be fff2 0f10 1500 0000 00f2 0f58 caf2
0f5e c1f2 0f5a c08b 85d8 14be ff48 988b


si, enlaznado con gcc funcona